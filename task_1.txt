Теория. Задание 1.
1.Что такое тестирование программного обеспечения? 
Тестирование программного обеспечения — процесс исследования, испытания программного продукта, имеющий своей целью проверку соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов, выбранных определённым образом. Тестировщик, в свою очередь, моделирует различные ситуации (тесты), которые могут возникнуть в процессе использования программы, чтобы разработчики смогли исправить обнаруженные баги.

2.Что такое качество программного обеспечения?
Качество программного обеспечения — способность программного продукта при заданных условиях удовлетворять установленным или предполагаемым потребностям.

3.Когда начинать и заканчивать тестирование? 
Начало и окончание тестирования зависят от множества факторов, включая тип проекта, методологию разработки, а также требования к качеству. Ниже представлены общие рекомендации:
 Когда начинать тестирование?
а) На ранних этапах разработки:
- Тестирование на уровне требований: Начинайте тестирование, когда требования к продукту сформулированы и задокументированы. Это позволит выявить несоответствия и недочеты на ранней стадии.
- Тестирование дизайна: Оценка прототипов и дизайна может помочь выявить проблемы с пользовательским интерфейсом до начала разработки.
b) Во время разработки:
- Тестирование компонентов: Тестирование отдельный модулей и компонентов следует проводить сразу после их завершения разработки.
- Интеграционное тестирование: Начинайте тестировать взаимодействие между компонентами и модулями по мере их готовности.
c) Параллельно с разработкой:- Agile и Scrum: В рамках этих методологий тестирование часто интегрируется в каждый спринт. Это позволяет выявлять и устранять дефекты непрерывно.
Когда заканчивать тестирование?
а) По достижении критериев приемлемости:
- Установите четкие критерии (например, процент прохождения тестов, количество серьезных багов и т.д.). Тестирование может считаться завершенным, когда все критерии выполнены.
b) По окончании разработки:
- После того как все функциональные требования реализованы и протестированы.
b) Перед релизом:
- Завершайте тестирование перед финальным релизом продукта, чтобы убедиться, что основной функционал работает корректно и отсутствуют критические ошибки.
d) После определенного цикла:
- В некоторых случаях тестирование может завершаться по времени (например, в конце спринта в Agile) или после выполнения определенного набора тестов.
Общая рекомендация: тестирование должно быть непрерывным процессом, который охватывает весь жизненный цикл разработки программного обеспечения. Лучше всего внедрять тестирование на ранних этапах и поддерживать его до самой финальной стадии проекта.

4.Какие знаете цели тестирования программного обеспечения?
1. Выявление дефектов: Основная цель тестирования – обнаружить ошибки и недостатки в программном обеспечении до его передачи пользователям.
2. Проверка функциональности: Убедиться, что программное обеспечение соответствует функциональным требованиям и спецификациям и выполняет заявленные функции.
3. Оценка производительности: Проверить, как ПО работает под различными нагрузками, включая тестирование на скорость, масштабируемость и стабильность.
4. Проверка безопасности: Обеспечение защиты данных и предотвращение несанкционированного доступа, а также уязвимостей в системе.
5. Совместимость: Убедиться, что ПО работает корректно на различных устройствах, операционных системах и браузерах.
6. Пользовательский опыт (UX): Оценить удобство использования и удовлетворенность пользователя интерфейсом и функционалом.
7. Соответствие стандартам: Проверить, что ПО соответствует внутренним и внешним стандартам и регуляторным требованиям.
8. Поддержка в процессе разработки: Обеспечение обратной связи для команды разработки, чтобы они могли корректировать и улучшать продукт.
9. Качество документации: Проверка качества и актуальности документации, что важно для пользователя и последующей поддержки ПО.
10. Уменьшение рисков: Снижение вероятности выхода на рынок некачественного продукта, что может негативно сказаться на репутации компании.

5.Quality Assurance- это?
Обеспечение качества (Quality Assurance, QA) - это третий уровень и представляет собой проактивную работу, направленную на создание уверенности, что требования к качеству будут выполнены.
Основная задача обеспечения качества - разработка методик и процессов, которые помогают минимизировать количество дефектов при тестировании. В область обеспечения качества могут входить такие действия, как тестирование документации, ревью кода на соответствие стандартам, внедрение методик работы с качеством. Обеспечение качества направлено на создание уверенности в том, что требования к качеству будут выполнены.
В случае интернет-магазина, обеспечение качества может включать анализ эффективности текущего процесса разработки для дальнейшего оптимизации работы, чтобы доставлять фичи пользователям раньше конкурентов.

6.Quality Control - это? 
Контроль качества (Quality Control, QC) - это второй уровень и включает в себя не только тестирование, но и контроль соответствия продукта заранее согласованному уровню качества.
Основная задача контроля качества - предоставить объективную оценку качества продукта на различных этапах разработки. Контроль качества направлен на выполнение установленных требований к качеству.
Вернемся к интернет-магазину. QC даст отмашку на релиз, если не заполнена страница благодарностей, на которую можно перейти из футера (подвала) сайта. Или, например, не даст добро, если страница благодарностей заполнена, а каталог пустой.

7.Тестирование - это? 
Тестирование (Testing) - это первый уровень и включает проверку программного продукта на соответствие его требованиям.
Основная цель тестирования заключается в том, чтобы убедиться, что ожидаемые результаты совпадают с фактическими. На этом уровне проводятся функциональные и другие виды тестирования, чтобы проверить работоспособность и соответствие продукта заранее установленным требованиям.
Например, в случае интернет-магазина, тестирование будет включать проверку функционала кнопки "Купить" и сравнение ее с макетом.

8.Какие знаете принципы тестирования?
• Тестирование не может доказать отсутствие багов (только их наличие);
• Исчерпывающее тестирование невозможно по определению;
• Раннее тестирование позволяет сэкономить ресурсы;
• Парадокс пестицидов;
• Кластеризация багов;
• Тестирование зависит от контекста;
• Заблуждение об отсутствии багов;


9.Что такое верификация?
Верификация в тестировании — это процесс оценки и проверки, соответствуют ли разрабатываемые системы, компоненты или продукты установленным требованиям и спецификациям. Цель верификации заключается в том, чтобы убедиться, что система или продукт разработаны правильно в соответствии с заданными требованиями, а не в том, чтобы проверить, делает ли система что-либо полезное.
Верификация может включать в себя различные методы и практики, такие как:
• Анализ документации — проверка требований и проектной документации на соответствие и полноту.
• Код-ревью — анализ кода другими разработчиками для определения соответствия стандартам.
• Статическое тестирование — использование инструментов для автоматической проверки кода без его выполнения.
• Моделирование — создание моделей системы для оценки ее поведения и соответствия требованиям.
Важно отметить, что верификация отвечает на вопрос "правильно ли мы строим продукт?", в то время как валидация (другое понятие) отвечает на вопрос "строим ли мы правильный продукт?". Верификация и валидация являются важными стадиями в процессе разработки программного обеспечения и помогают снизить риски и обеспечить качество конечного продукта.

10.Что такое валидация?
Валидация в тестировании — это процесс подтверждения того, что система, компонент или продукт отвечают потребностям и ожиданиям пользователей, а также соответствуют установленным требованиям. Основная цель валидации заключается в оценке полезности и эффективности системы в реальных условиях ее использования.
В отличие от верификации, которая проверяет соответствие требованиям в процессе разработки, валидация акцентируется на том, что система делает и насколько правильно она выполняет поставленные задачи.
Процесс валидации может включать в себя различные методы и подходы, такие как:
•Тестирование — проведение функциональных, интеграционных и системных тестов для проверки соответствия требований.
• Пользовательское тестирование — взаимодействие с конечными пользователями, которые используют продукт, с целью получения обратной связи о его работе и функциональности.
• Прототипирование — создание временных версий системы для оценки ее функциональности и дизайна, прежде чем разрабатывать полный продукт.
• Полевые испытания — тестирование продукта в условиях, имитирующих реальные ситуации использования, для оценки его производительности и удобства.
Валидация отвечает на вопрос: "Строим ли мы правильный продукт?" Это важная часть программной разработки, которая помогает убедиться в том, что продукт отвечает требованиям пользователей и решает их задачи. Она завершает цикл разработки и играет ключевую роль в обеспечении качества конечного продукта.


11.Перечислите характеристики качества программного обеспечения и их атрибуты.
На сегодня наиболее популярна многоуровневая модель качества программного обеспечения (описывает внутреннее и внешнее качество ПО), которая представлена в серии стандартов ISO 9126.
На верхнем уровне выделяют 6 основных характеристик качества ПО, каждую из которых описывают набором атрибутов, имеющих соответствующие метрики для оценок.
Согласно этой модели, функциональность определяется умением ПО решать задачи, которые соответствуют известным и предполагаемым потребностям юзера при заданных условиях использования.
Т.е. эта характеристики отвечает за то, что ПО работает безошибочно и точно, функционально совместимо, имеет соответствие стандартам отрасли и защиту от несанкционированного доступа.
Надежность — умение ПО выполнять требуемые задачи в поставленных условиях на заданном отрезке времени.
Атрибуты этой характеристики — это завершенность и целостность всей системы, способность к самостоятельному и корректному восстановлению, отказоустойчивость.
Удобство использования — интуитивная понятность использования и изучения, удобство ПО для пользователя.
Эффективность — способность ПО обеспечивать необходимый уровень производительности при выделенных ресурсах, времени и других заданных условиях.
Удобство сопровождения — легкость для анализирования, тестирования, изменения для исправления дефектов, для реализации новых задач, для облегчения дальнейшего сопровождения и возможности легкой адаптации.
Портативность — характеристика ПО с точки зрения беспроблемной его переноса с одного окружения на другое.